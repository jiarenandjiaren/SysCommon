<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="M:Infrastructure.AutoMapperExt.MapTo``1(System.Object)">
            <summary>
             类型映射
            </summary>
        </member>
        <member name="M:Infrastructure.AutoMapperExt.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:Infrastructure.AutoMapperExt.MapToList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:Infrastructure.AutoMapperExt.MapTo``2(``0,``1)">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="T:Infrastructure.Cache.ICacheContext">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:Infrastructure.Cache.ICacheContext.Get``1(System.String)">
            <summary>
            获取缓存项
            </summary>
            <typeparam name="T">缓存对象类型</typeparam>
            <param name="key">键</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Infrastructure.Cache.ICacheContext.Set``1(System.String,``0,System.DateTime)">
            <summary>
            设置缓存项
            </summary>
            <typeparam name="T">缓存对象类型</typeparam>
            <param name="key">键</param>
            <param name="t">缓存对象</param>
            <returns>true成功,false失败</returns>
        </member>
        <member name="M:Infrastructure.Cache.ICacheContext.Remove(System.String)">
            <summary>
            移除一个缓存项
            </summary>
            <param name="key">缓存项key</param>
            <returns>true成功,false失败</returns>
        </member>
        <member name="T:Infrastructure.CommonHelper">
            <summary>
            常用公共类
            </summary>
        </member>
        <member name="M:Infrastructure.CommonHelper.TimerStart">
            <summary>
            计时器开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.CommonHelper.TimerEnd(System.Diagnostics.Stopwatch)">
            <summary>
            计时器结束
            </summary>
            <param name="watch"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.CommonHelper.RemoveDup(System.String[])">
            <summary>
            删除数组中的重复项
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.CommonHelper.CreateNo">
            <summary>
            自动生成编号  201008251145409865
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.CommonHelper.RndNum(System.Int32)">
            <summary>
            生成0-9随机数
            </summary>
            <param name="codeNum">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.CommonHelper.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:Infrastructure.CommonHelper.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:Infrastructure.CommonHelper.DelLastLength(System.String,System.Int32)">
            <summary>
            删除最后结尾的长度
            </summary>
            <param name="str"></param>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Const.Secret">
            <summary>
            加密对应密钥Key
            </summary>
        </member>
        <member name="P:Infrastructure.Const.Secret.User">
            <summary>
            用户密码加密key
            </summary>
        </member>
        <member name="P:Infrastructure.Const.Secret.DB">
            <summary>
            数据库加密key
            </summary>
        </member>
        <member name="P:Infrastructure.Const.Secret.Redis">
            <summary>
            redis加密key
            </summary>
        </member>
        <member name="P:Infrastructure.Const.Secret.JWT">
            <summary>
            jwt加密key
            </summary>
        </member>
        <member name="F:Infrastructure.Const.Secret.ExportFile">
            <summary>
            导出文件加密key
            </summary>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
            <param name="s">字符串</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            list转换为Json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            list转换为json
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="list"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ToJson(System.Object)">
            <summary>
            对象转换为json
            </summary>
            <param name="jsonObject">json对象</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ToJson(System.Collections.IEnumerable)">
            <summary>
            对象集合转换为json
            </summary>
            <param name="array">对象集合</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ToArrayString(System.Collections.IEnumerable)">
            <summary>    
            普通集合转换Json   
            </summary>   
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns>  
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ToJson(System.Data.DataSet)">
            <summary>    
            DataSet转换为Json   
            </summary>    
            <param name="dataSet">DataSet对象</param>   
            <returns>Json字符串</returns>    
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ToJson(System.Data.DataTable)">
            <summary>     
            Datatable转换为Json     
            </summary>    
            <param name="table">Datatable对象</param>     
            <returns>Json字符串</returns>     
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ToJson(System.Data.DataTable,System.String)">
            <summary>    
            DataTable转换为Json     
            </summary>    
        </member>
        <member name="M:Infrastructure.ConvertJsonExtension.ReaderJson(System.Data.IDataReader)">
            <summary>     
            DataReader转换为Json     
            </summary>     
            <param name="dataReader">DataReader对象</param>     
            <returns>Json字符串</returns>  
        </member>
        <member name="M:Infrastructure.DynamicLinq.GenerateBody``1(System.Linq.Expressions.ParameterExpression,Infrastructure.Filter)">
            <summary>
            创建linq表达示的body部分
            </summary>
        </member>
        <member name="M:Infrastructure.DynamicLinq.GenerateLambda(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            创建完整的lambda
            </summary>
        </member>
        <member name="M:Infrastructure.DynamicLinq.GenerateFilter``1(System.Linq.IQueryable{``0},System.String,Infrastructure.FilterGroup)">
            <summary>
            转换FilterGroup为Lambda表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="parametername"></param>
            <param name="filterGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.DynamicLinq.ConvertGroup``1(Infrastructure.FilterGroup,System.Linq.Expressions.ParameterExpression)">
            <summary>
            转换filtergroup为表达式
            </summary>
            <param name="filterGroup"></param>
            <param name="param"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.DynamicLinq.ConvertGroup``1(Infrastructure.FilterGroup[],System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            转换FilterGroup[]为表达式，不管FilterGroup里面的Filters
            </summary>
            <param name="groups"></param>
            <param name="param"></param>
            <param name="operation"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.DynamicLinq.ConvertFilters``1(Infrastructure.Filter[],System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            转换Filter数组为表达式
            </summary>
            <param name="filters"></param>
            <param name="param"></param>
            <param name="operation"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Encryption.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Encryption.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="decryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.HttpContextExtension.Request(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            获取Request值
            </summary>
            <param name="context"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.HttpContextExtension.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否为ajax请求
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.HttpContextExtension.GetRequestParameters(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取请求的参数
            net core 2.0已增加回读方法 context.Request.EnableRewind();
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ReaderToDictionaryList(System.Data.IDataReader)">
            <summary>
            IDataReader转换成DictionaryList
            </summary>
            <param name="Reader"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ReaderToList``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换成List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Reader"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToDataSet``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToListSet``1(``0,System.Boolean)">
            <summary>
            将实例转换为集合数据集。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToXmlDocument``1(``0)">
            <summary>
            将可序列化实例转换为XmlDocument。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <returns>XmlDocument。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="t">转换的元素类型。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ListToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否转换为字符串形式。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetData(System.Data.DataSet)">
            <summary>
            获取DataSet第一表，第一行，第一列的值。
            </summary>
            <param name="ds">DataSet数据集。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetData(System.Data.DataTable)">
            <summary>
            获取DataTable第一行，第一列的值。
            </summary>
            <param name="dt">DataTable数据集表。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetData(System.Data.DataSet,System.String)">
            <summary>
            获取DataSet第一个匹配columnName的值。
            </summary>
            <param name="ds">数据集。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetData(System.Data.DataTable,System.String)">
            <summary>
            获取DataTable第一个匹配columnName的值。
            </summary>
            <param name="dt">数据表。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToString(System.Object,System.String)">
            <summary>
            将object转换为string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToString(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            将DateTime?转换为string类型信息。
            </summary>
            <param name="o">DateTime?。</param>
            <param name="format">标准或自定义日期和时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToString(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            将TimeSpan?转换为string类型信息。
            </summary>
            <param name="o">TimeSpan?。</param>
            <param name="format">标准或自定义时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToByte(System.Object,System.Byte)">
            <summary>
            将object转换为byte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>byte。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToChar(System.Object,System.Char)">
            <summary>
            将object转换为char类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>char。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToInt(System.Object,System.Int32)">
            <summary>
            将object转换为int类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>int。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToDouble(System.Object,System.Double)">
            <summary>
            将object转换为double类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>double。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将object转换为decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToFloat(System.Object,System.Single)">
            <summary>
            将object转换为float类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>float。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToLong(System.Object,System.Int64)">
            <summary>
            将object转换为long类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>long。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToBool(System.Object,System.Boolean)">
            <summary>
            将object转换为bool类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToSbyte(System.Object,System.SByte)">
            <summary>
            将object转换为sbyte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>sbyte。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToShort(System.Object,System.Int16)">
            <summary>
            将object转换为short类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>short。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToUShort(System.Object,System.UInt16)">
            <summary>
            将object转换为ushort类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ushort。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToULong(System.Object,System.UInt64)">
            <summary>
            将object转换为ulong类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ulong。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToEnum``1(System.Object,``0)">
            <summary>
            将object转换为Enum[T]类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Enum[T]。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为DateTime类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToTimeSpan(System.Object,System.TimeSpan)">
            <summary>
            将object转换为TimeSpan类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>TimeSpan。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToGuid(System.Object,System.Guid)">
            <summary>
            将object转换为Guid类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetBool(System.String)">
            <summary>
            从object中获取bool类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetDecimal(System.Object)">
            <summary>
            从object中获取decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetPositiveNumber(System.Object)">
            <summary>
            从object中获取正数信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetDateTime1(System.Object)">
            <summary>
            从object中获取DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetTimeSpan(System.Object)">
            <summary>
            从object中获取TimeSpan?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>TimeSpan?。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetGuid(System.Object)">
            <summary>
            从object中获取Guid?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>Guid?。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetSqlDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为SqlServer中的DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.Value(System.Xml.Linq.XElement,System.String)">
            <summary>
            读取XElement节点的文本内容。
            </summary>
            <param name="xElement">XElement节点。</param>
            <param name="t">默认值。</param>
            <returns>文本内容。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.GetFirstOrDefaultValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关或者第一个的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.Element(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            获取具有指定 System.Xml.Linq.XName 的第一个（按文档顺序）子元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回同名默认值。</param>
            <returns>与指定 System.Xml.Linq.XName 匹配的 System.Xml.Linq.XElement，或者为 null。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的子元素集合。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含此System.Xml.Linq.XContainer 的子元素，或者非空默认值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的经过筛选的子元素集合。集合中只包括具有匹配 System.Xml.Linq.XName 的元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含具有匹配System.Xml.Linq.XName 的 System.Xml.Linq.XContainer 的子级，或者非空默认值。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.RemoveHTMLTags(System.String)">
            <summary>
            删除html标签。
            </summary>
            <param name="html">输入的字符串。</param>
            <returns>没有html标签的字符串。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToFileName(System.String)">
            <summary>
            字符串转换为文件名。
            </summary>
            <param name="s">字符串。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.DefaultStringIfEmpty(System.String,System.String[])">
            <summary>
            获取默认非空字符串。
            </summary>
            <param name="s">首选默认非空字符串。</param>
            <param name="args">依次非空字符串可选项。</param>
            <returns>默认非空字符串。若无可选项则返回string.Empty。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.Text.RegularExpressions.Regex,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.String,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.ToUnixTimeStamp(System.DateTime)">
            <summary>
            将日期转换为UNIX时间戳字符串
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.IsMobile(System.String)">
            <summary>
            判断当前字符串是否是移动电话号码
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.ObjectExtension.IsEmail(System.String)">
            <summary>
            判断当前字符串是否为邮箱
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Extensions.Flag">
            <summary>
            标记。
            </summary>
        </member>
        <member name="F:Infrastructure.Extensions.Flag.Default">
            <summary>
            默认。
            </summary>
        </member>
        <member name="F:Infrastructure.Extensions.Flag.True">
            <summary>
            真。
            </summary>
        </member>
        <member name="F:Infrastructure.Extensions.Flag.False">
            <summary>
            假。
            </summary>
        </member>
        <member name="M:Infrastructure.Extensions.SecurityEncDecryptExtensions.EncryptDES(System.String,System.String)">
            <summary> 
            DES加密字符串 
            </summary> 
            <param name="encryptString">待加密的字符串</param> 
            <param name="encryptKey">加密密钥,要求为16位</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns> 
        </member>
        <member name="M:Infrastructure.Extensions.SecurityEncDecryptExtensions.DecryptDES(System.String,System.String)">
            <summary> 
            DES解密字符串 
            </summary> 
            <param name="decryptString">待解密的字符串</param> 
            <param name="decryptKey">解密密钥,要求为16位,和加密密钥相同</param> 
            <returns>解密成功返回解密后的字符串，失败返源串</returns> 
        </member>
        <member name="T:Infrastructure.Extensions.StaticHttpContextExtensions">
            <summary>
             配置HttpContext
            </summary>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GetTimeStamp(System.DateTime)">
            <summary>
            获取时间戳 
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GetTimeSpmpToDate(System.Object)">
            <summary>
            时间戳转换成日期
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.IsPhoneNo(System.String)">
            <summary>
            判断是不是正确的手机号码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.IsNumber(System.String,System.String)">
            <summary>
            根据传入格式判断是否为小数
            </summary>
            <param name="str"></param>
            <param name="formatString">18,5</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.IsNumber(System.String,System.Int32,System.Int32)">
            <summary>
            判断一个字符串是否为合法数字(指定整数位数和小数位数)
            </summary>
            <param name="str">字符串</param>
            <param name="precision">整数位数</param>
            <param name="scale">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GetLong(System.Object)">
            <summary>
            获取 object 中的枚举值
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GetFloat(System.Object)">
            <summary>
            获取 object 中的 float
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GetDecimal(System.Object)">
            <summary>
            获取 object 中的 decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GetDynamic(System.Object)">
            <summary>
            获取 object 中的 decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.ReplaceWhitespace(System.String,System.String)">
            <summary>
                替换空格字符
            </summary>
            <param name="input"></param>
            <param name="replacement">替换为该字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:Infrastructure.Extensions.StringExtension.GenerateRandomNumber(System.Int32)">
            <summary>
            生成指定长度的随机数
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.FileHelper.Write(System.String,System.String)">
            <summary>
            文件写入
            </summary>
            <param name="path"></param>
            <param name="context"></param>
        </member>
        <member name="M:Infrastructure.FileHelper.getallfilesbyfolder(System.String,System.Boolean)">
            <summary>
            获取指定文件夹下所有的文件名称
            </summary>
            <param name="foldername">指定文件夹名称,绝对路径</param>
            <param name="filefilter">文件类型过滤,根据文件后缀名,如:*,*.txt,*.xls</param>
            <param name="iscontainsubfolder">是否包含子文件夹</param>
            <returns>arraylist数组,为所有需要的文件路径名称</returns>
        </member>
        <member name="M:Infrastructure.FileHelper.GetFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Int64},System.String)">
            <summary>From:www.uzhanbao.com
            获取路径下所有文件以及子文件夹中文件
            </summary>
            <param name="path">全路径根目录</param>
            <param name="FileList">存放所有文件的全路径</param>
            <param name="RelativePath"></param>
            <returns></returns>
        </member>
        <member name="P:Infrastructure.FilterGroup.Operation">
            <summary>
            or /and
            </summary>
        </member>
        <member name="M:Infrastructure.GenerateId.GenerateLong">
            <summary>
            生成一个长整型，可以转成19字节长的字符串
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Infrastructure.GenerateId.GenerateStr">
            <summary>
            生成16个字节长度的数据与英文组合串
            </summary>
        </member>
        <member name="M:Infrastructure.GenerateId.ShortStr">
            <summary>
            创建11位的英文与数字组合
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Infrastructure.GenerateId.GenerateOrderNumber">
            <summary>
            唯一订单号生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.GenerateId.NextRandom(System.Int32,System.Int32)">
            <summary>
            参考：msdn上的RNGCryptoServiceProvider例子
            </summary>
            <param name="numSeeds"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.GenerateId.Convert(System.Int64)">
            <summary>
            10进制转换为62进制
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.GenericHelpers">
            <summary>
            List转成Tree
            <para>李玉宝新增于2016-10-09 19:54:07</para>
            </summary>
        </member>
        <member name="M:Infrastructure.GenericHelpers.GenerateTree``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},``1)">
            <summary>
            Generates tree of items from item list
            </summary>
            
            <typeparam name="T">Type of item in collection</typeparam>
            <typeparam name="K">Type of parent_id</typeparam>
            
            <param name="collection">Collection of items</param>
            <param name="idSelector">Function extracting item's id</param>
            <param name="parentIdSelector">Function extracting item's parent_id</param>
            <param name="rootId">Root element id</param>
            
            <returns>Tree of items</returns>
        </member>
        <member name="M:Infrastructure.GenericHelpers.ArrayToString(System.Object,System.String)">
            <summary>
            把数组转为逗号连接的字符串
            </summary>
            <param name="data"></param>
            <param name="Str"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.HttpHelper">
            <summary>
            http请求类
            </summary>
        </member>
        <member name="M:Infrastructure.HttpHelper.#ctor(System.String)">
            <param name="ipaddress">请求的基础IP，例如：http://192.168.0.33:8080/ </param>
        </member>
        <member name="M:Infrastructure.HttpHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            创建带用户信息的请求客户端
            </summary>
            <param name="userName">用户账号</param>
            <param name="pwd">用户密码，当WebApi端不要求密码验证时，可传空串</param>
            <param name="uriString">The URI string.</param>
        </member>
        <member name="M:Infrastructure.HttpHelper.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get请求数据
              /// <para>最终以url参数的方式提交</para>
            <para>yubaolee 2016-3-3 重构与post同样异步调用</para>
            </summary>
            <param name="parameters">参数字典,可为空</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.HttpHelper.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get请求数据
            <para>最终以url参数的方式提交</para>
            </summary>
            <param name="parameters">参数字典</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Infrastructure.HttpHelper.Post(System.Object,System.String)">
            <summary>
            以json的方式Post数据 返回string类型
            <para>最终以json的方式放置在http体中</para>
            </summary>
            <param name="entity">实体</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.HttpHelper.PostDicObj(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            提交字典类型的数据
            <para>最终以formurlencode的方式放置在http体中</para>
            <para>李玉宝于2016-07-20 19:01:59</para>
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Infrastructure.HttpHelper.PostDic(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Post Dic数据
            <para>最终以formurlencode的方式放置在http体中</para>
            <para>李玉宝于2016-07-15 15:28:41</para>
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Infrastructure.HttpHelper.ConcatURL(System.String)">
            <summary>
            把请求的URL相对路径组合成绝对路径
            <para>李玉宝于2016-07-21 9:54:07</para>
            </summary>
        </member>
        <member name="T:Infrastructure.Json">
            <summary>
            Json操作
            </summary>
        </member>
        <member name="P:Infrastructure.KeyDescription.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:Infrastructure.KeyDescription.Description">
            <summary>
            键的描述
            </summary>
        </member>
        <member name="P:Infrastructure.KeyDescription.Browsable">
            <summary>
            前端是否显示
            </summary>
        </member>
        <member name="P:Infrastructure.KeyDescription.Type">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="F:Infrastructure.PayConfig.AliConfig.Uid">
            <summary>
            合作商户uid
            </summary>
        </member>
        <member name="M:Infrastructure.PayConfig.Common.GenerateOutTradeNo">
                   * 根据当前系统时间加随机序列来生成订单号
                    * @return 订单号
        </member>
        <member name="M:Infrastructure.PayConfig.Common.GenerateTimeStamp">
                    * 生成时间戳，标准北京时间，时区为东八区，自1970年1月1日 0点0分0秒以来的秒数
                     * @return 时间戳
        </member>
        <member name="M:Infrastructure.PayConfig.Common.GenerateNonceStr">
            生成随机串，随机串包含字母或数字
            @return 随机串
        </member>
        <member name="P:Infrastructure.Response.Message">
            <summary>
            操作消息【当Status不为 200时，显示详细的错误信息】
            </summary>
        </member>
        <member name="P:Infrastructure.Response.Code">
            <summary>
            操作状态码，200为正常
            </summary>
        </member>
        <member name="T:Infrastructure.Response`1">
            <summary>
            WEBAPI通用返回泛型基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Infrastructure.Response`1.Result">
            <summary>
            回传的结果
            </summary>
        </member>
        <member name="M:Infrastructure.StringExtension.GetTimeStamp(System.DateTime)">
            <summary>
            获取时间戳 
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.StringExtension.GetTimeSpmpToDate(System.Object)">
            <summary>
            时间戳转换成日期
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.StringExtension.IsPhoneNo(System.String)">
            <summary>
            判断是不是正确的手机号码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.StringExtension.IsNumber(System.String,System.String)">
            <summary>
            根据传入格式判断是否为小数
            </summary>
            <param name="str"></param>
            <param name="formatString">18,5</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.StringExtension.IsNumber(System.String,System.Int32,System.Int32)">
            <summary>
            判断一个字符串是否为合法数字(指定整数位数和小数位数)
            </summary>
            <param name="str">字符串</param>
            <param name="precision">整数位数</param>
            <param name="scale">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.StringExtension.GetLong(System.Object)">
            <summary>
            获取 object 中的枚举值
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Infrastructure.StringExtension.GetFloat(System.Object)">
            <summary>
            获取 object 中的 float
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.StringExtension.GetDecimal(System.Object)">
            <summary>
            获取 object 中的 decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Infrastructure.StringExtension.GetDynamic(System.Object)">
            <summary>
            获取 object 中的 decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Infrastructure.StringExtension.ReplaceWhitespace(System.String,System.String)">
            <summary>
                替换空格字符
            </summary>
            <param name="input"></param>
            <param name="replacement">替换为该字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:Infrastructure.StringExtension.GenerateRandomNumber(System.Int32)">
            <summary>
            生成指定长度的随机数
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:Infrastructure.TreeNode.Id">
            <summary>
            子id
            </summary>
        </member>
        <member name="P:Infrastructure.TreeNode.ParentId">
            <summary>
            父id
            </summary>
        </member>
        <member name="P:Infrastructure.TreeNode.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Infrastructure.TreeNode.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="M:Infrastructure.TreeNode.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:Infrastructure.TreeNode.#ctor(System.String,System.String,System.String)">
            <summary>
            有参构造函数
            </summary>
            <param name="id">子id</param>
            <param name="name">名称</param>
            <param name="parentId">父id</param>
        </member>
        <member name="M:Infrastructure.TreeNode.#ctor(System.String,System.String,Infrastructure.TreeNode)">
            <summary>
            有参构造函数
            </summary>
            <param name="id">子id</param>
            <param name="name">名称</param>
            <param name="parent">父节点</param>
        </member>
        <member name="T:Infrastructure.UriUtil">
            <summary>
            URl帮助类
            </summary>
        </member>
        <member name="M:Infrastructure.UriUtil.GetAppendedQueryString(System.String,System.String,System.String)">
            <summary>
            在URL后面追加参数
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
